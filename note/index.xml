<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on ON THE WAY</title>
    <link>https://chongiofai.github.io/note/</link>
    <description>Recent content in Notes on ON THE WAY</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 28 Jan 2021 17:26:00 +0800</lastBuildDate><atom:link href="https://chongiofai.github.io/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tmux Note</title>
      <link>https://chongiofai.github.io/note/tmux/</link>
      <pubDate>Thu, 28 Jan 2021 17:26:00 +0800</pubDate>
      
      <guid>https://chongiofai.github.io/note/tmux/</guid>
      <description>Insert Lead paragraph here.
Tmux笔记 配置文件  我的Tmux配置
 操作  Default Commands  1attach-session (attach) [-dErx] [-c working-directory] [-t target-session] 2bind-key (bind) [-nr] [-T key-table] [-N note] key command [arguments] 3break-pane (breakp) [-dP] [-F format] [-n window-name] [-s src-pane] [-t dst-window] 4capture-pane (capturep) [-aCeJNpPq] [-b buffer-name] [-E end-line] [-S start-line] [-t target-pane] 5choose-buffer [-NrZ] [-F format] [-f filter] [-O sort-order] [-t target-pane] [template] 6choose-client [-NrZ] [-F format] [-f filter] [-O sort-order] [-t target-pane] [template] 7choose-tree [-GNrswZ] [-F format] [-f filter] [-O sort-order] [-t target-pane] [template] 8clear-history (clearhist) [-t target-pane] 9clock-mode [-t target-pane] 10command-prompt [-1kiN] [-I inputs] [-p prompts] [-t target-client] [template] 11confirm-before (confirm) [-p prompt] [-t target-client] command 12copy-mode [-eHMuq] [-t target-pane] 13delete-buffer (deleteb) [-b buffer-name] 14detach-client (detach) [-aP] [-E shell-command] [-s target-session] [-t target-client] 15display-menu (menu) [-c target-client] [-t target-pane] [-T title] [-x position] [-y position] name key command .</description>
    </item>
    
    <item>
      <title>Partition Disk</title>
      <link>https://chongiofai.github.io/note/partition-disk/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://chongiofai.github.io/note/partition-disk/</guid>
      <description>Partition Tool  fdisk和parted都是分区实用程序。 fdisk是众所周知的，稳定的，并且推荐用于MBR分区布局，而parted是支持GPT分区的第一个Linux块设备管理实用程序之一。 喜欢fdisk的用户界面的用户可以使用 gdisk （GPT fdisk）作为parted的替代。
 parted fdisk gdisk Partition Table MBR 主引导记录MBR (Master Boot Record)对分区的起始扇区和长度使用32比特的标识符，它支持三种分区类型：主分区、扩展分区和逻辑分区。主分区把它们的信息存储在主引导记录里一个非常小的空间里，通常是512字节，因为这个空间太小了，所以系统只支持四个主分区。（例如从 /dev/sda1 到/dev/sda4）
GPT GPT(GUID Partition Table)为分区使用64比特标识符，它用来存储分区信息的空间也远比MBR的512字节要大，GPT磁盘它也不对分区的数量作限制。分区的大小限制可以达到8ZiB。 译者注：
11ZiB = 1,024 EiB 21EiB = 1024 PiB 31PiB = 1024 TiB 41TiB = 1024 GiB 51GiB = 1024 MiB 61MiB = 1024 KiB 71KiB = 1024 B 当操作系统和系统固件之间的软件接口是UEFI (相对于BIOS)时，GPT几乎是必选的，因为这里MBR会引起很多兼容性问题。
GPT还利用校验和和冗余。 它携带CRC32校验和以检测报头和分区表中的错误，并在磁盘的末尾有一个备份GPT。 此备份表可用于恢复磁盘开头附近主GPT的损坏。
Partition Foramt btrfs 是下一代文件系统，提供了许多高级功能，如快照，通过校验和自我修复、 透明压缩、 子卷和集成 RAID。几个发行版已经开始将它作为一个默认的选项,但它还未为生产工作做好准备。文件系统报告崩溃是常见的。其开发人员敦促人们运行最新的内核版本来解决安全问题,以及老的问题。 这种情况已经很多年了,现在使用它还为时过早。如果出现变更，以及发生了变化，解决错误问题，都很少往旧内核注入补丁。请谨慎使用这个文件系统!
ext2 是经考验证明可靠的Linux文件系统，但是没有元数据日志，这意味这在启动系统时的ext2文件系统的日常检查相当耗时。现在相当一部分的新一代的日志文件系统都可以非常迅速检查一致性，因此比那些非日志文件系统更受欢迎。当你启动系统碰巧遇到文件系统状态不一致时，日志文件系统不会在那里耽搁很长时间。</description>
    </item>
    
    <item>
      <title>Git Conventions</title>
      <link>https://chongiofai.github.io/note/git-conventions/</link>
      <pubDate>Tue, 15 Dec 2020 14:57:21 +0800</pubDate>
      
      <guid>https://chongiofai.github.io/note/git-conventions/</guid>
      <description>Insert Lead paragraph here.
Commit Message Conventional Commits Commit First Line Prefix  build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) chore: Other changes that don&#39;t modify src or test files ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs) docs: Documentation only changes feat: A new feature fix: A bug fix perf: A code change that improves performance refactor: A code change that neither fixes a bug nor adds a feature revert: Reverts a previous commit style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) test: Adding missing tests or correcting existing tests   References</description>
    </item>
    
    <item>
      <title>Install Gentoo/Archlinux</title>
      <link>https://chongiofai.github.io/note/install-gentoo-and-archlinux/</link>
      <pubDate>Sun, 06 Dec 2020 09:13:12 +0800</pubDate>
      
      <guid>https://chongiofai.github.io/note/install-gentoo-and-archlinux/</guid>
      <description>这理又重装了Gentoo,Archlinux是之前安装的,只在记忆中简单对比一下大概的
  约定名词 安装环境: 安装Gentoo/Archlinux的操作环境,非安装后的新系统环境,通常为LiveCD的Live环境中 目标环境: 安装Gentoo/Archlinux的新系统环境,为安装后结果,此文以/mnt为挂载目标(与Archlinux一致,Gentoo官方文档是以/mnt/gentoo为例)
 一点小理解  https://www.gentoo.org/ https://www.archlinux.org/
     Gentoo Archlinux     一句话 配置自由度极高(也有人说OverEninerring) KISS(Keep it Simple, Stupid)   硬件支持 反正内核自已编译程序自已编译... 官方支持x86   INIT OpenRC(default)/Systemd Systemd   包管理 portage(源码编译,提供USE,SLOT等超赞功能) pacman(二进制分发)   安装环境 基本完全不依赖LiveCD,可在任何安装环境下使用stage包开始构建新系统 依赖LiveCD一些工具    玩起来   Gentoo
 https://wiki.gentoo.org/wiki/Installation https://wiki.gentoo.org/wiki/Handbook:Main_Page
   Archlinux
 https://wiki.archlinux.org/index.php/installation_guide
   安装介质 制作LiveUSB</description>
    </item>
    
    <item>
      <title>LiveCD</title>
      <link>https://chongiofai.github.io/note/make-livecd/</link>
      <pubDate>Sun, 06 Dec 2020 09:13:12 +0800</pubDate>
      
      <guid>https://chongiofai.github.io/note/make-livecd/</guid>
      <description>LiveCD Install LiveCD 1dd status=progress if=livecd.iso of=/dev/sdaX bs=512 2fdisk ... # TODO: fix disk size 3cryptsetup luksFormt /dev/sdaX 4cryptsetup open persistence /dev/sdaX 5mkfs.ext4 -L persistence /dev/mapper/persistence 6mount /dev/mapper/persistence /mnt/livecd 7echo &amp;#34;/ union&amp;#34; &amp;gt; /mnt/livecd/persistence.conf 8umount /dev/mapper/persistence 9cryptsetup close persistence   backup dick images  1$ fdisk -l 2$ blkid 3$ dd status=progress bs=512 if=/dev/sda1 | gzip -nc -6 &amp;gt; backup.img.gz 4# status 5# bs 6# if 参考资料 https://www.kali.org/downloads/
https://www.kali.org/docs/usb/kali-linux-live-usb-install-linux/</description>
    </item>
    
    <item>
      <title>Android Flashing Device</title>
      <link>https://chongiofai.github.io/note/android-flusing-device/</link>
      <pubDate>Mon, 23 Nov 2020 19:18:05 +0800</pubDate>
      
      <guid>https://chongiofai.github.io/note/android-flusing-device/</guid>
      <description>Android刷机 环境   OnePlus8Pro
  Kali Rolling
  adb
 Android Debug Bridge version 1.0.39 Version 1:8.1.0+r23-8 Installed as /usr/lib/android-sdk/platform-tools/adb
sudo apt install android-tools-adb
   fastboot
 fastboot version 1:8.1.0+r23-8 Installed as /usr/lib/android-sdk/platform-tools/fastboot
sudo apt install android-tools-fastboot
   基础   解锁OEM
 https://source.android.com/setup/build/running
   进入FastbootMode
  进入RecoveryMode
  安装Magisk/MagiskManager
 官方网站：　https://magiskmanager.com/
   玩起来   官方OTA全量包中解压，此处使用OnePlus8ProHydrogen_15.</description>
    </item>
    
    <item>
      <title>MITM Attack Via V2ray</title>
      <link>https://chongiofai.github.io/note/mitm-attack-via-v2ray/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chongiofai.github.io/note/mitm-attack-via-v2ray/</guid>
      <description>前两天有新闻JD和GITHUB被劫持，和最近生活中有些情况令我想到关于劫持页面重导向试试实现(其实想指定情况下在我手机上劫持微信跳转页面到我自己的页面下
 环境  V2Ray 4.22.1 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.13.8 linux/amd64)  实现  v2配置 设置outbounds规则，设置劫持转发的目标点，在routing设置转发   https://www.v2fly.org/chapter_02/protocols/freedom.html
 1 &amp;#34;outbounds&amp;#34;: [ 2 { 3 &amp;#34;protocol&amp;#34;: &amp;#34;freedom&amp;#34;, 4 &amp;#34;settings&amp;#34;: { 5 &amp;#34;redirect&amp;#34;: &amp;#34;127.0.0.1:58885&amp;#34; 6 }, 7 &amp;#34;tag&amp;#34;: &amp;#34;mitm&amp;#34; 8 } 9 ],  https://www.v2fly.org/chapter_02/03_routing.html
 1 &amp;#34;routing&amp;#34;: { 2 &amp;#34;rules&amp;#34;: [ 3 { 4 &amp;#34;domain&amp;#34;: [ 5 &amp;#34;&amp;lt;劫持页面&amp;gt;&amp;#34; 6 ], 7 &amp;#34;outboundTag&amp;#34;: &amp;#34;mitm&amp;#34;, 8 &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34; 9 } 10 ] 写了个简单劫持 指定了在固定情况下发生劫持.</description>
    </item>
    
    <item>
      <title>Grub</title>
      <link>https://chongiofai.github.io/note/grub/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chongiofai.github.io/note/grub/</guid>
      <description>之前grub搞了个在U盘上引就安装系统，不过引导不了windows的安装装，和和和之前又洗了，之后再玩玩，也想想要怎么玩，因为也想搞个linux在U盘上 不过今天看到双系统的引导,一来想把倒数关了,免自己老要开机时守那几秒,和上想是找方法想弄成,自动启动上次开启的系统,和和也再好好看看grub
 目录  自已之前看过一次文档(都忘了),现在再撸一下目撸猜一下,纪录一下
  /boot/grub/* 引导盘引导程序核心位置，所有引导需要的材料都放在这里了 /boot/grub/grub.cfg  引导时的配置都看他了，不过好像是从grub2开始这个是自动生成的，改这如果重刷了还是会改回去，不优雅  /etc/grub.d/* 好像从grub2版本可以用命令按这个路径下的配置把/boot/grub/grub.cfg渲染出来， 看下README  1All executable files in this directory are processed in shell expansion order. 2 3 00_*: Reserved for 00_header. 4 10_*: Native boot entries. 5 20_*: Third party apps (e.g. memtest86+). 6 7 The number namespace in-between is configurable by system installer and/or 8 administrator. For example, you can add an entry to boot another OS as 9 01_otheros, 11_otheros, etc, depending on the position you want it to occupy in 10 the menu; and then adjust the default setting via /etc/default/grub.</description>
    </item>
    
    <item>
      <title>Ngrok Customized</title>
      <link>https://chongiofai.github.io/note/ngrok-customized/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chongiofai.github.io/note/ngrok-customized/</guid>
      <description>client  Run-SetupModel-newClientModel建立ngrokd-ngroko信道   好像無加密
 ctl-clientModel.Run-control開始使用model向ngrokd建立連接   newClientModel??為什么給configPath不是config,因為服务器給出新authToken更新
 clientModel.update更新control   tunnel下分拆可能會引到重復NewTunnel Proxy Agent SaveAuthToken保存完Token不更新內存中的conifg???
 asset脚本會先把asset文件的數据生成assets_release.go二進制導入版,然后編譯時直接放進程序中,在請求時會直接把路徑換成已轉二進制數据寫入   ngrok-&amp;gt;ngrokd &amp;lt;-msg.Auth驗証建立信道 -&amp;gt;msg.AuthResp請求結果 &amp;lt;-msg.ReqTunnel請求建立Tunnel -&amp;gt;NewTunnel註冊結果 ** -&amp;gt;Pong心跳 ** -&amp;gt;ReqProxy請求 #&amp;lt;-如果有設HTTPPROXY測轉發連接,失敗結束 &amp;lt;-msg.ReqProxy确認 -&amp;gt;msg.StartProxy服务器确認返回URL比對自已URL
   Control
  ClientModel ###ENV DEBUG
  server   net.Listen-conn.Listen-http.startHttpListener
  tunnelListener開启註冊監听 !TODO: 加密 !TODO: HTTP信道 !TODO: 一個服务多個同協議
  ctl.manager核心
  ctl.in讀入ctl,ctl.out ctl寫出???有點困暈
  ctl.stopper等待其他gorounit shutdown信号</description>
    </item>
    
  </channel>
</rss>
